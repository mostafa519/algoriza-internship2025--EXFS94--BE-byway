// <auto-generated />
using System;
using ByWay.RepositoryLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ByWay.RepositoryLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ByWay.DomainLayer.Enrollment.CategoryStudent", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("CategoryStudents", (string)null);
                });

            modelBuilder.Entity("ByWay.DomainLayer.Enrollment.CourseStudent", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseStudents", (string)null);

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            StudentId = "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                            EnrollmentDate = new DateTime(2025, 10, 7, 1, 13, 43, 545, DateTimeKind.Local).AddTicks(1039),
                            Id = 0
                        },
                        new
                        {
                            CourseId = 2,
                            StudentId = "4fa85f64-5717-4562-b3fc-2c963f66afa7",
                            EnrollmentDate = new DateTime(2025, 10, 7, 1, 13, 43, 549, DateTimeKind.Local).AddTicks(6787),
                            Id = 0
                        });
                });

            modelBuilder.Entity("ByWay.DomainLayer.Enrollment.FavoriteCourseEnrollment", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("FavoriteCourseEnrollments", (string)null);
                });

            modelBuilder.Entity("ByWay.DomainLayer.Enrollment.InstructorCategory", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("InstructorId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("InstructorCategories", (string)null);
                });

            modelBuilder.Entity("ByWay.DomainLayer.Enrollment.InstructorStudent", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("InstructorId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("InstructorStudents", (string)null);

                    b.HasData(
                        new
                        {
                            InstructorId = 1,
                            StudentId = "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                            Id = 0
                        },
                        new
                        {
                            InstructorId = 2,
                            StudentId = "4fa85f64-5717-4562-b3fc-2c963f66afa7",
                            Id = 0
                        });
                });

            modelBuilder.Entity("ByWay.DomainLayer.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icon = "fa-laptop-code",
                            Name = "Development"
                        },
                        new
                        {
                            Id = 2,
                            Icon = "fa-paint-brush",
                            Name = "Design"
                        },
                        new
                        {
                            Id = 3,
                            Icon = "fa-book",
                            Name = "Education"
                        },
                        new
                        {
                            Id = 4,
                            Icon = "fa-music",
                            Name = "Music"
                        },
                        new
                        {
                            Id = 5,
                            Icon = "fa-camera",
                            Name = "Photography"
                        },
                        new
                        {
                            Id = 6,
                            Icon = "fa-dumbbell",
                            Name = "Fitness"
                        },
                        new
                        {
                            Id = 7,
                            Icon = "fa-globe",
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 8,
                            Icon = "fa-heart",
                            Name = "Health"
                        },
                        new
                        {
                            Id = 9,
                            Icon = "fa-film",
                            Name = "Movies"
                        },
                        new
                        {
                            Id = 10,
                            Icon = "fa-code",
                            Name = "Programming"
                        });
                });

            modelBuilder.Entity("ByWay.DomainLayer.Model.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("DurationInHours")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int?>("LectureCount")
                        .HasColumnType("int");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Learn full stack development with React & .NET.",
                            DurationInHours = 60,
                            EndDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageFile = "https://tse3.mm.bing.net/th/id/OIP.OlilRMMjyjCRGtmJmgUZ5wHaEK",
                            InstructorId = 1,
                            LectureCount = 45,
                            Level = "Intermediate",
                            Name = "Full Stack Web Development",
                            Price = 199.99m,
                            Rate = 4.7999999999999998,
                            StartDate = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Master the fundamentals of UI/UX design.",
                            DurationInHours = 40,
                            EndDate = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageFile = "https://www.excelptp.com/wp-content/uploads/2023/01/ui-ux-banner-img2.jpg",
                            InstructorId = 2,
                            LectureCount = 30,
                            Level = "Beginner",
                            Name = "UI/UX Design Principles",
                            Price = 149.99m,
                            Rate = 4.5999999999999996,
                            StartDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ByWay.DomainLayer.Model.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Instructors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Experienced in building scalable web applications using ASP.NET Core and React.",
                            ImageFile = "https://th.bing.com/th/id/R.5e12eed1bfa441a5cd5a95ae1ef0fe86?rik=%2brmcaAO0castSw&pid=ImgRaw&r=0",
                            JobTitle = "Senior Full Stack Developer",
                            Name = "John Doe",
                            Rate = 4.7999999999999998
                        },
                        new
                        {
                            Id = 2,
                            Description = "Specialist in UI/UX optimization for modern apps.",
                            ImageFile = "https://tse2.mm.bing.net/th/id/OIP.QHvN4dAyFlm-OXeV0hOy0QHaEA",
                            JobTitle = "UI/UX Designer",
                            Name = "Jane Smith",
                            Rate = 4.5999999999999996
                        },
                        new
                        {
                            Id = 3,
                            Description = "Expert in APIs, microservices, and .NET 8.",
                            ImageFile = "https://s3.amazonaws.com/coursesity-blog/2023/12/Backend_Development_Courses.jpg",
                            JobTitle = "Backend Developer",
                            Name = "Ahmed Ali",
                            Rate = 4.7000000000000002
                        },
                        new
                        {
                            Id = 4,
                            Description = "Focused on crafting responsive React apps.",
                            ImageFile = "https://solwincdn-79e1.kxcdn.com/wp-content/uploads/2021/06/Front-End-Development-Best-Practices-e1627617889742-500x250.png",
                            JobTitle = "Frontend Developer",
                            Name = "Sara Johnson",
                            Rate = 4.5
                        });
                });

            modelBuilder.Entity("ByWay.DomainLayer.Model.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b2c3d4e5-f6a7-8901-bcde-234567890abc",
                            AccessFailedCount = 0,
                            AccountType = 0,
                            ConcurrencyStamp = "d3d6a6c3-6c95-4014-8f6b-0e87affb3919",
                            Email = "admin@byway.com",
                            EmailConfirmed = true,
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@BYWAY.COM",
                            NormalizedUserName = "ADMIN@BYWAY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI4XgCclMd3cmDBxxiagP7Tc1QqqnUD5VzTdgxECakaoTKNXUp8bxxHJFCaCnVpslQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd1a0e49-c257-4711-8af7-c7e5689a4b1c",
                            TwoFactorEnabled = false,
                            UserName = "admin@byway.com"
                        },
                        new
                        {
                            Id = "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "cf614daa-6780-4b37-b925-6413c042a6f6",
                            Email = "mustafa.ali@example.com",
                            EmailConfirmed = true,
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mustafa",
                            LastName = "Ali",
                            LockoutEnabled = false,
                            NormalizedEmail = "MUSTAFA.ALI@EXAMPLE.COM",
                            NormalizedUserName = "MUSTAFA",
                            PasswordHash = "AQAAAAIAAYagAAAAENTiACyll1y8nMvXRTOUqAo8niC98igwcr8yBgnnbI3m40t02P8BW0+sH2FYwkfqDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3202e055-9d2a-4949-a8b7-11f5142cb76c",
                            TwoFactorEnabled = false,
                            UserName = "mustafa"
                        },
                        new
                        {
                            Id = "4fa85f64-5717-4562-b3fc-2c963f66afa7",
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "e955d49a-4221-4146-b0c3-71c9eb82ef01",
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            EnrollmentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHNDOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEFaAmq9DcmHzJlHCkA+mUKdCzPP7U2KKduWHYf/pJd0DYwAilIqRhMoQaVnRJ5EsFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36b531aa-f3ea-4582-8133-2d06ac7affc8",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        });
                });

            modelBuilder.Entity("ByWay.DomainLayer.Model.StudentProfile", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CVC")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StudentId");

                    b.ToTable("StudentProfiles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "22222222-2222-2222-2222-222222222222",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b2c3d4e5-f6a7-8901-bcde-234567890abc",
                            RoleId = "11111111-1111-1111-1111-111111111111"
                        },
                        new
                        {
                            UserId = "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                            RoleId = "22222222-2222-2222-2222-222222222222"
                        },
                        new
                        {
                            UserId = "4fa85f64-5717-4562-b3fc-2c963f66afa7",
                            RoleId = "22222222-2222-2222-2222-222222222222"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ByWay.DomainLayer.Enrollment.CategoryStudent", b =>
                {
                    b.HasOne("ByWay.DomainLayer.Model.Category", "Category")
                        .WithMany("CategoryStudens")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ByWay.DomainLayer.Model.Student", "Student")
                        .WithMany("StudentCategorys")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ByWay.DomainLayer.Enrollment.CourseStudent", b =>
                {
                    b.HasOne("ByWay.DomainLayer.Model.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ByWay.DomainLayer.Model.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ByWay.DomainLayer.Enrollment.FavoriteCourseEnrollment", b =>
                {
                    b.HasOne("ByWay.DomainLayer.Model.Course", "Course")
                        .WithMany("CourseFavorites")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ByWay.DomainLayer.Model.Student", "Student")
                        .WithMany("StudentFavoriteCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ByWay.DomainLayer.Enrollment.InstructorCategory", b =>
                {
                    b.HasOne("ByWay.DomainLayer.Model.Category", "Category")
                        .WithMany("CategoryInstructors")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ByWay.DomainLayer.Model.Instructor", "Instructor")
                        .WithMany("InstructorCategorys")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ByWay.DomainLayer.Enrollment.InstructorStudent", b =>
                {
                    b.HasOne("ByWay.DomainLayer.Model.Instructor", "Instructor")
                        .WithMany("InstructorStudents")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ByWay.DomainLayer.Model.Student", "Student")
                        .WithMany("StudentInstructors")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ByWay.DomainLayer.Model.Course", b =>
                {
                    b.HasOne("ByWay.DomainLayer.Model.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ByWay.DomainLayer.Model.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ByWay.DomainLayer.Model.StudentProfile", b =>
                {
                    b.HasOne("ByWay.DomainLayer.Model.Student", "Student")
                        .WithOne("Profile")
                        .HasForeignKey("ByWay.DomainLayer.Model.StudentProfile", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ByWay.DomainLayer.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ByWay.DomainLayer.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ByWay.DomainLayer.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ByWay.DomainLayer.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ByWay.DomainLayer.Model.Category", b =>
                {
                    b.Navigation("CategoryInstructors");

                    b.Navigation("CategoryStudens");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("ByWay.DomainLayer.Model.Course", b =>
                {
                    b.Navigation("CourseFavorites");

                    b.Navigation("CourseStudents");
                });

            modelBuilder.Entity("ByWay.DomainLayer.Model.Instructor", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("InstructorCategorys");

                    b.Navigation("InstructorStudents");
                });

            modelBuilder.Entity("ByWay.DomainLayer.Model.Student", b =>
                {
                    b.Navigation("Profile");

                    b.Navigation("StudentCategorys");

                    b.Navigation("StudentCourses");

                    b.Navigation("StudentFavoriteCourses");

                    b.Navigation("StudentInstructors");
                });
#pragma warning restore 612, 618
        }
    }
}
